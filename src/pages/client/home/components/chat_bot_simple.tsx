"use client"

import type React from "react"
import { useState, useRef, useEffect } from "react"
import { MessageCircle, X, Send, Bot, User, Sparkles, Zap, FileText, Paperclip, AlertCircle, LogIn, Settings } from "lucide-react"

interface Message {
    id: string
    text: string
    sender: "user" | "bot"
    timestamp: Date
}

export default function ChatBotSimple() {
    const [isOpen, setIsOpen] = useState(false)
    const [isDemoMode, setIsDemoMode] = useState(true) // M·∫∑c ƒë·ªãnh b·∫≠t demo mode
    const [messages, setMessages] = useState<Message[]>([
        {
            id: "1",
            text: "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa c·ª≠a h√†ng. B·∫°n ƒëang ·ªü ch·∫ø ƒë·ªô demo. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n? ‚ú®",
            sender: "bot",
            timestamp: new Date(),
        },
    ])
    const [inputMessage, setInputMessage] = useState("")
    const [isTyping, setIsTyping] = useState(false)
    const [showSparkles, setShowSparkles] = useState(false)
    const messagesEndRef = useRef<HTMLDivElement>(null)

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
    }

    useEffect(() => {
        scrollToBottom()
    }, [messages])

    useEffect(() => {
        if (isOpen) {
            setShowSparkles(true)
            setTimeout(() => setShowSparkles(false), 2000)
        }
    }, [isOpen])

    // Demo mode responses
    const getDemoResponse = (userMessage: string) => {
        const lowerMessage = userMessage.toLowerCase()

        if (lowerMessage.includes("gi√°") || lowerMessage.includes("bao nhi√™u")) {
            return "C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m! Gi√° s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i r·∫•t c·∫°nh tranh v√† ph√π h·ª£p v·ªõi ch·∫•t l∆∞·ª£ng. B·∫°n c√≥ th·ªÉ xem chi ti·∫øt gi√° t·∫°i trang s·∫£n ph·∫©m ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n c·ª• th·ªÉ. üí∞"
        }

        if (lowerMessage.includes("giao") || lowerMessage.includes("ship")) {
            return "Ch√∫ng t√¥i cung c·∫•p d·ªãch v·ª• giao h√†ng nhanh ch√≥ng v√† an to√†n! üöö\n\n- Giao h√†ng trong n·ªôi th√†nh: 2-3 ng√†y\n- Giao h√†ng t·ªânh: 3-5 ng√†y\n- Mi·ªÖn ph√≠ ship cho ƒë∆°n h√†ng t·ª´ 500k\n- H·ªó tr·ª£ thanh to√°n khi nh·∫≠n h√†ng"
        }

        if (lowerMessage.includes("b·∫£o h√†nh") || lowerMessage.includes("warranty")) {
            return "T·∫•t c·∫£ s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i ƒë·ªÅu c√≥ ch·∫ø ƒë·ªô b·∫£o h√†nh ch√≠nh h√£ng! üõ°Ô∏è\n\n- B·∫£o h√†nh 12 th√°ng cho t·∫•t c·∫£ s·∫£n ph·∫©m\n- B·∫£o h√†nh 24 th√°ng cho gi√†y th·ªÉ thao cao c·∫•p\n- H·ªó tr·ª£ ƒë·ªïi tr·∫£ trong 30 ng√†y\n- D·ªãch v·ª• b·∫£o h√†nh t·∫≠n n∆°i"
        }

        if (lowerMessage.includes("size") || lowerMessage.includes("k√≠ch th∆∞·ªõc")) {
            return "Ch√∫ng t√¥i c√≥ ƒë·∫ßy ƒë·ªß c√°c size t·ª´ 35-45 cho gi√†y nam v√† 34-42 cho gi√†y n·ªØ! üëü\n\nB·∫°n c√≥ th·ªÉ:\n- Xem b·∫£ng size t·∫°i trang s·∫£n ph·∫©m\n- Chat v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n size ph√π h·ª£p\n- ƒê·∫øn c·ª≠a h√†ng ƒë·ªÉ th·ª≠ tr·ª±c ti·∫øp"
        }

        if (lowerMessage.includes("c·∫£m ∆°n") || lowerMessage.includes("thanks")) {
            return "R·∫•t vui ƒë∆∞·ª£c ph·ª•c v·ª• b·∫°n! üòä N·∫øu b·∫°n c·∫ßn th√™m th√¥ng tin g√¨, ƒë·ª´ng ng·∫°i h·ªèi nh√©!"
        }

        return "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi:\n\nüí∞ Th√¥ng tin gi√° c·∫£\nüöö D·ªãch v·ª• giao h√†ng\nüõ°Ô∏è Ch·∫ø ƒë·ªô b·∫£o h√†nh\nüëü T∆∞ v·∫•n size gi√†y\n\nB·∫°n quan t√¢m ƒë·∫øn v·∫•n ƒë·ªÅ g√¨?"
    }

    const handleSendMessage = async () => {
        if (!inputMessage.trim()) return

        const userMessage: Message = {
            id: Date.now().toString(),
            text: inputMessage,
            sender: "user",
            timestamp: new Date(),
        }

        setMessages((prev) => [...prev, userMessage])
        setInputMessage("")
        setIsTyping(true)

        // Simulate bot response
        setTimeout(() => {
            const botResponse: Message = {
                id: (Date.now() + 1).toString(),
                text: getDemoResponse(inputMessage),
                sender: "bot",
                timestamp: new Date(),
            }
            setMessages((prev) => [...prev, botResponse])
            setIsTyping(false)
            setTimeout(() => {
                scrollToBottom()
            }, 100)
        }, 1000)
    }

    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault()
            handleSendMessage()
        }
    }

    return (
        <>
            {/* Floating Chat Button */}
            <div className="fixed bottom-6 right-6 z-50">
                <div className="relative">
                    {/* Pulse rings */}
                    <div
                        className={`absolute inset-0 rounded-full bg-teal-400 animate-ping ${isOpen ? "opacity-0" : "opacity-75"}`}
                    ></div>
                    <div
                        className={`absolute inset-0 rounded-full bg-teal-400 animate-pulse ${isOpen ? "opacity-0" : "opacity-50"}`}
                    ></div>

                    <button
                        onClick={() => setIsOpen(true)}
                        className={`relative bg-teal-500 hover:bg-teal-600 text-white rounded-full p-4 shadow-2xl transition-all duration-500 transform hover:scale-110 ${isOpen ? "scale-0 rotate-180" : "scale-100 rotate-0"
                            }`}
                    >
                        <MessageCircle size={28} className="drop-shadow-lg" />
                        {/* Notification dot */}
                        <div className="absolute -top-1 -right-1 w-4 h-4 bg-red-500 rounded-full flex items-center justify-center">
                            <div className="w-2 h-2 bg-white rounded-full animate-bounce"></div>
                        </div>
                    </button>
                </div>
            </div>

            {/* Chat Modal */}
            {isOpen && (
                <div className="fixed bottom-6 right-6 z-50 w-80 h-[450px] bg-white rounded-2xl shadow-2xl border border-gray-200 flex flex-col transform animate-in slide-in-from-bottom-4 duration-500">
                    {/* Sparkles Effect */}
                    {showSparkles && (
                        <div className="absolute inset-0 pointer-events-none overflow-hidden rounded-2xl">
                            {[...Array(6)].map((_, i) => (
                                <Sparkles
                                    key={i}
                                    className={`absolute text-yellow-400 animate-bounce`}
                                    size={16}
                                    style={{
                                        left: `${Math.random() * 80 + 10}%`,
                                        top: `${Math.random() * 80 + 10}%`,
                                        animationDelay: `${i * 0.2}s`,
                                        animationDuration: "2s",
                                    }}
                                />
                            ))}
                        </div>
                    )}

                    {/* Header */}
                    <div className="bg-gradient-to-r from-teal-500 to-teal-600 text-white p-4 rounded-t-2xl flex items-center justify-between relative overflow-hidden">
                        <div className="absolute inset-0 bg-gradient-to-r from-teal-400/20 to-teal-500/20 animate-pulse"></div>

                        <div className="flex items-center space-x-3 relative z-10">
                            <div className="relative">
                                <Bot size={24} className="drop-shadow-lg" />
                                <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
                            </div>
                            <div>
                                <span className="font-semibold text-base">Tr·ª£ l√Ω ·∫£o</span>
                                <div className="text-xs opacity-90 flex items-center space-x-1">
                                    <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                                    <span>Demo Mode</span>
                                </div>
                            </div>
                        </div>
                        <button
                            onClick={() => setIsOpen(false)}
                            className="hover:bg-white/20 rounded-full p-2 transition-all duration-300 transform hover:scale-110 relative z-10"
                        >
                            <X size={20} />
                        </button>
                    </div>

                    {/* Demo Mode Indicator */}
                    <div className="bg-yellow-50 border-l-4 border-yellow-400 p-3 mx-4 mt-2 rounded">
                        <div className="flex items-center">
                            <AlertCircle className="w-5 h-5 text-yellow-400 mr-2" />
                            <p className="text-sm text-yellow-700">ƒêang ·ªü ch·∫ø ƒë·ªô Demo - Kh√¥ng c·∫ßn ƒëƒÉng nh·∫≠p</p>
                        </div>
                    </div>

                    {/* Messages */}
                    <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gradient-to-b from-gray-50/50 to-white">
                        {messages.map((message, index) => (
                            <div
                                key={message.id}
                                className={`flex ${message.sender === "user" ? "justify-end" : "justify-start"} animate-in slide-in-from-${message.sender === "user" ? "right" : "left"}-4 duration-500`}
                                style={{ animationDelay: `${index * 0.1}s` }}
                            >
                                <div
                                    className={`max-w-[85%] p-4 rounded-2xl shadow-lg transform transition-all duration-300 hover:scale-105 ${message.sender === "user"
                                        ? "bg-gradient-to-r from-teal-500 to-teal-600 text-white rounded-br-md shadow-blue-200"
                                        : "bg-white text-gray-800 rounded-bl-md shadow-gray-200 border border-gray-100"
                                        }`}
                                >
                                    <div className="flex items-start space-x-3">
                                        {message.sender === "bot" && (
                                            <div className="flex-shrink-0 w-8 h-8 bg-gradient-to-r from-teal-500 to-teal-600 rounded-full flex items-center justify-center">
                                                <Bot size={16} className="text-white" />
                                            </div>
                                        )}
                                        <div className="flex-1">
                                            <p className="text-sm leading-relaxed whitespace-pre-line">{message.text}</p>
                                        </div>
                                        {message.sender === "user" && (
                                            <div className="flex-shrink-0 w-8 h-8 bg-white/20 rounded-full flex items-center justify-center">
                                                <User size={16} className="text-white" />
                                            </div>
                                        )}
                                    </div>
                                </div>
                            </div>
                        ))}

                        {/* Typing Indicator */}
                        {isTyping && (
                            <div className="flex justify-start animate-in slide-in-from-left-4 duration-300">
                                <div className="bg-white text-gray-800 p-4 rounded-2xl rounded-bl-md max-w-[85%] shadow-lg border border-gray-100">
                                    <div className="flex items-center space-x-3">
                                        <div className="flex-shrink-0 w-8 h-8 bg-gradient-to-r from-teal-500 to-teal-600 rounded-full flex items-center justify-center">
                                            <Bot size={16} className="text-white" />
                                        </div>
                                        <div className="flex items-center space-x-2">
                                            <span className="text-sm text-gray-600">ƒêang so·∫°n tin</span>
                                            <div className="flex space-x-1">
                                                {[0, 1, 2].map((i) => (
                                                    <div
                                                        key={i}
                                                        className="w-2 h-2 bg-gradient-to-r from-teal-400 to-teal-500 rounded-full animate-bounce"
                                                        style={{ animationDelay: `${i * 0.2}s` }}
                                                    ></div>
                                                ))}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}
                        <div ref={messagesEndRef} />
                    </div>

                    {/* Input Section */}
                    <div className="p-4 border-t border-gray-100 bg-gradient-to-r from-gray-50 to-white rounded-b-2xl">
                        <div className="flex space-x-3">
                            <div className="flex-1 relative">
                                <input
                                    type="text"
                                    value={inputMessage}
                                    onChange={(e) => setInputMessage(e.target.value)}
                                    onKeyPress={handleKeyPress}
                                    placeholder="Nh·∫≠p tin nh·∫Øn ƒë·ªÉ test demo..."
                                    className="w-full border-2 border-gray-200 rounded-xl px-4 py-3 text-sm focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-all duration-300 bg-white shadow-inner"
                                />
                                {inputMessage && (
                                    <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                                        <Zap size={16} className="text-teal-500 animate-pulse" />
                                    </div>
                                )}
                            </div>
                            <button
                                onClick={handleSendMessage}
                                disabled={isTyping || !inputMessage.trim()}
                                className="w-10 h-10 bg-gradient-to-r from-teal-500 to-teal-600 hover:from-teal-600 hover:to-teal-700 disabled:from-gray-300 disabled:to-gray-400 text-white rounded-lg flex items-center justify-center transition-all duration-300 transform hover:scale-105 disabled:scale-100 shadow-lg"
                            >
                                {isTyping ? (
                                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                                ) : (
                                    <Send size={18} />
                                )}
                            </button>
                        </div>

                        {/* Quick Actions */}
                        <div className="flex flex-wrap gap-2 mt-3">
                            {["üí∞ Gi√° c·∫£", "üöö Giao h√†ng", "üõ°Ô∏è B·∫£o h√†nh"].map((action) => (
                                <button
                                    key={action}
                                    onClick={() => setInputMessage(action.split(" ")[1])}
                                    className="text-xs bg-gradient-to-r from-teal-100 to-teal-200 text-teal-700 px-3 py-1 rounded-full hover:from-teal-200 hover:to-teal-300 transition-all duration-300 transform hover:scale-105"
                                >
                                    {action}
                                </button>
                            ))}
                        </div>
                    </div>
                </div>
            )}
        </>
    )
} 